.\" Generated with Ronnjs/v0.1
.\" http://github.com/kapouer/ronnjs/
.
.TH "NPM\-SCRIPTS" "1" "August 2010" "" ""
.
.SH "NAME"
\fBnpm-scripts\fR \-\- How npm handles the "scripts" field
.
.SH "DESCRIPTION"
npm supports the "scripts" member of the package\.json script, for the
following scripts:
.
.IP "\(bu" 4
preinstall:
Run BEFORE the package is installed
.
.IP "\(bu" 4
install, postinstall:
Run AFTER the package is installed\.
.
.IP "\(bu" 4
preactivate:
Run BEFORE the package is activated\.
.
.IP "\(bu" 4
activate, postactivate:
Run AFTER the package has been activated\.
.
.IP "\(bu" 4
predeactivate, deactivate:
Run BEFORE the package is deactivated\.
.
.IP "\(bu" 4
postdeactivate:
Run AFTER the package is deactivated\.
.
.IP "\(bu" 4
preuninstall, uninstall:
Run BEFORE the package is uninstalled\.
.
.IP "\(bu" 4
postuninstall:
Run AFTER the package is uninstalled\.
.
.IP "\(bu" 4
preupdate:
Run BEFORE the package is updated with the update command\.
.
.IP "\(bu" 4
update, postupdate:
Run AFTER the package is updated with the update command\.
.
.IP "\(bu" 4
preupdatedependencies:
Run BEFORE the package dependencies are pointed to the new version\.
.
.IP "\(bu" 4
updatedependencies, postupdatedependencies:
Run AFTER the package dependencies are pointed to the new version\.
.
.IP "" 0
.
.SH "ENVIRONMENT"
Package scripts run in an environment where many pieces of information are made available regarding the setup of npm and the current state of the process\.
.
.IP "\(bu" 4
package\.json vars:
The package\.json fields are tacked onto the \fBnpm_package_\fR prefix\. So, for
instance, if you had \fB{"name":"foo", "version":"1\.2\.5"}\fR in your package\.json
file, then your package scripts would have the \fBnpm_package_name\fR environment
variable set to "foo", and the \fBnpm_package_version\fR set to "1\.2\.5"
.
.IP "\(bu" 4
configuration vars:
Configuration parameters are put in the environment with the \fBnpm_config_\fR
prefix\. For instance, you can view the effective \fBroot\fR config by checking the \fBnpm_config_root\fR environment variable\.
.
.IP "\(bu" 4
current lifecycle event:
Lastly, the \fBnpm_lifecycle_event\fR environment variable is set to whichever
stage of the cycle is being executed\. So, you could have a single script used
for different parts of the process which switches based on what\'s currently
happening\.
.
.IP "" 0
.
.P
Objects are flattened following this format, so if you had \fB{"scripts":{"install":"foo\.js"}}\fR in your package\.json, then you\'d see this
in the script:
.
.IP "" 4
.
.nf
process\.env\.npm_package_scripts_install === "foo\.js"
.
.fi
.
.IP "" 0
.
.SH "EXAMPLES"
For example, if your package\.json contains this:
.
.IP "" 4
.
.nf
{ "scripts" :
  { "install" : "scripts/install\.js"
  , "postinstall" : "scripts/install\.js"
  , "activate" : "scripts/install\.js"
  , "uninstall" : "scripts/uninstall\.js"
  }
}
.
.fi
.
.IP "" 0
.
.P
then the \fBscripts/install\.js\fR will be called for the install, post\-install,
and activate stages of the lifecycle, and the \fBscripts/uninstall\.js\fR would be
called when the package is uninstalled\.  Since \fBscripts/install\.js\fR is running
for three different phases, it would be wise in this case to look at the \fBnpm_lifecycle_event\fR environment variable\.
.
.P
If you want to run a make command, you can do so\.  This works just fine:
.
.IP "" 4
.
.nf
{ "scripts" :
  { "preinstall" : "\./configure"
  , "install" : "make && make install"
  , "test" : "make test"
  }
}
.
.fi
.
.IP "" 0
.
.SH "EXITING"
Scripts are run by passing the line as a script argument to \fBsh\fR\|\.
.
.P
If the script exits with a code other than 0, then this will abort the
process\.
.
.P
Note that these script files don\'t have to be nodejs or even javascript
programs\. They just have to be some kind of executable file\.
